#!/usr/bin/env node

var yargs = require('yargs')
	.usage('Usage: check <file> [options]')
    .describe('v', 'Verbose flag. Will print all statements. Default is false.')
    .describe('r', 'Recrusive flag. Will recursively check required files. Default is false.')
    .describe('j', 'Will output as a tree. Default is true.')
    .describe('o', 'if -j, will output json into a file: <file>_log. If a file is given, outputs to that it. Default is false.')
    .showHelpOnFail(false);

var check = require('../check.js'),
	Scope = require('../scope.js'),
	colors  = require('colors'),
	fs = require('fs'),
	path = require('path'),
	_ = require('underscore'),
	file = process.argv[2];

if (!file) {
	yargs.showHelp();
	process.exit();
}

file = path.resolve(file);

if (!fs.existsSync(file)) {
	console.error(file, 'doesn\'t exist.');
	process.exit();
} else if (!fs.lstatSync(file).isFile()) {
	console.error(file, 'is not a file.');
	process.exit();
}

var argv = yargs.argv;

if (argv.h) {
	yargs.showHelp();
	process.exit();
}

check.flags.verbose = argv.v;
check.flags.recursive = argv.r;
if (argv.j)
	check.flags.json = argv.j;

if (!argv.j)
	console.log(' ---- '.yellow, file.white);

var scope = new Scope({
	file: file
});

var ast = check.astFromFile(scope.file);
check.traverse(ast, scope);

if (check.flags.json) {
	if (check.reports.length !== 0)
		console.log(require('prettyjson').render(check.reports));
	else
		console.log(colors.green('No vulneralbities found'));
}